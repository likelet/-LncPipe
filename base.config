/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // mimimum allocation
  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  time = { check_max( 1.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'
// local, slurm, pbs, lsf, etc etc
  executor = 'slurm'

  // Process-specific resource requirements

      //  withName: combine_public_annotation {      }

        withName: Make_STARindex {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        withName: Make_bowtie2_index {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        withName: Make_hisat_index {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 160.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        //withName: Run_fastQC { }

        withName: Run_afterQC {
          cpus = { check_max( 6, 'cpus' ) }
          memory = { check_max( 32.GB * task.attempt, 'memory' ) }
          time = { check_max( 4.h * task.attempt, 'time' ) }
      }

        withName: Run_FastP {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 8.GB * task.attempt, 'memory' ) }

      }

        withName: fastq_star_alignment_For_discovery {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        withName: fastq_tophat_alignment_For_discovery {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        withName: fastq_hisat2_alignment_For_discovery {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 16.GB * task.attempt, 'memory' ) }
          time = { check_max( 5.h * task.attempt, 'time' ) }
      }

        withName: StringTie_assembly {
          cpus = { check_max( 10, 'cpus' ) }
      }

        withName: StringTie_merge_assembled_gtf {
          cpus = { check_max( 10, 'cpus' ) }
      }

        withName: Cufflinks_assembly {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 12.h * task.attempt, 'time' ) }
      }

        withName: cuffmerge_assembled_gtf {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 80.GB * task.attempt, 'memory' ) }
          time = { check_max( 12.h * task.attempt, 'time' ) }
      }

      //  withName: Merge_assembled_gtf_with_GENCODE { }

      //  withName: Identify_novel_lncRNA_with_criterions { }

      //   withName: Predict_coding_abilities_by_PLEK { }

      //  withName: Predict_coding_abilities_by_CPAT { }

      //  withName: Filter_lncRNA_by_coding_potential_result { }

      //  withName: Summary_renaming_and_classification { }


      //  withName: Rerun_CPAT_to_evaluate_lncRNA { }

      //  withName: Rerun_CPAT_to_evaluate_coding { }

      //  withName: Secondary_basic_statistic { }

      //  withName: Run_htseq_for_quantification{}

        withName: Run_kallisto_for_quantification {
          cpus = { check_max( 10, 'cpus' ) }
          memory = { check_max( 32.GB * task.attempt, 'memory' ) }
      }

        withName: Build_kallisto_index_of_GTF_for_quantification {
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 64.GB * task.attempt, 'memory' ) }
          time = { check_max( 2.h * task.attempt, 'time' ) }
      }

        // withName: Get_HTseq_matrix { }

        // withName: Get_kallisto_matrix { }

        withName: Run_LncPipeReporter {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        }

        Run_LncPipeReporter_without_Design {
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
      }
}

params {
  // Defaults only, expecting to be overwritten. Set max per cluster node.
  max_memory = 240.GB
  max_cpus = 20
  max_time = 240.h
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

timeline {
  enabled = true
  file = "${params.out_folder}/pipeline_info/lncPipe_timeline.html"
}
report {
  enabled = true
  file = "${params.out_folder}/pipeline_info/lncPipe_report.html"
}
trace {
  enabled = true
  file = "${params.out_folder}/pipeline_info/lncPipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.out_folder}/pipeline_info/lncPipe_DAG.svg"
}
